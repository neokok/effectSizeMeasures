expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr handles vectors of different lengths with an error", {
x <- c(1, 2, 3)
y <- c(1, 2)
expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr returns 0 for uncorrelated data", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)
expect_equal(pearson_corr(x, y), 0)
})
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)
cor(x,y)
test_that("pearson_corr calculates correct correlation for known inputs", {
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
expect_equal(pearson_corr(x, y), 1, tolerance = 1e-4)
})
test_that("pearson_corr handles vectors of different lengths with an error", {
x <- c(1, 2, 3)
y <- c(1, 2)
expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr handles empty vectors with an error", {
x <- c()
y <- c()
expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr returns error if one variable has no variance", {
x <- c(1, 1, 1, 1, 1)
y <- c(2, 4, 6, 8, 10)
expect_true(is.na(pearson_corr(x, y)))
})
test_that("pearson_corr calculates correct correlation for known inputs", {
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
expect_equal(pearson_corr(x, y), 1, tolerance = 1e-4)
})
test_that("pearson_corr handles vectors of different lengths with an error", {
x <- c(1, 2, 3)
y <- c(1, 2)
expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr handles empty vectors with an error", {
x <- c()
y <- c()
expect_error(pearson_corr(x, y), "Input lengths of x and y must be equal")
})
test_that("pearson_corr returns error if one variable has no variance", {
x <- c(1, 1, 1, 1, 1)
y <- c(2, 4, 6, 8, 10)
expect_error(pearson_corr(x, y), "Std is 0")
})
devtools::test()
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
pearson_corr(x, y)
devtools::test()
library(usethis)
test_that("risk_ratio")
use_test("risk_ratio")
use_test("odds_ratio")
use_test("cohens_d")
use_test("coef_determination")
test_that("Cohen's d calculates correctly for non-empty vectors", {
# Simple example where difference is known
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(round(cohens_d(x1, x2), 3), -2.236, tolerance = 1e-3)
expect_equal(round(cohens_d(x2, x1), 3), 2.236, tolerance = 1e-3)
})
# Simple example where difference is known
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
# Simple example where difference is known
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(round(cohens_d(x1, x2, F), 3), -2.236, tolerance = 1e-3)
expect_equal(round(cohens_d(x2, x1, T), 3), 2.236, tolerance = 1e-3)
lsr::cohensD(x1, x2)
expect_equal(cohens_d(x1, x2, F), 3, -3.162, tolerance = 1e-3)
expect_equal(cohens_d(x1, x2, F), -3.162, tolerance = 1e-3)
test_that("Cohen's d calculates correctly for non-empty vectors", {
# Simple example where difference is known
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(cohens_d(x1, x2, F), -3.162, tolerance = 1e-3)
expect_equal(cohens_d(x1, x2, T), -3.162, tolerance = 1e-3)
})
expect_equal(cohens_d(x1, x2, F), -3.162, tolerance = 1e-3)
cohens_d(x1, x2, F)
test_that("Cohen's d calculates correctly for non-empty vectors", {
# Simple example where difference is known
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(cohens_d(x1, x2, F), -3.162, tolerance = 1e-3)
expect_equal(cohens_d(x1, x2, T), 3.162, tolerance = 1e-3)
})
test_that("Cohen's d calculates absolute effect size correctly when abs = TRUE", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(round(cohens_d(x1, x2, abs = TRUE), 3), 2.236, tolerance = 1e-3)
expect_equal(round(cohens_d(x2, x1, abs = TRUE), 3), 2.236, tolerance = 1e-3)
})
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
cohens_d(x1, x2, abs = TRUE)
lsr::cohensD(x1, x2)
cohens_d(x1, x2, abs = F)
test_that("Cohen's d calculates absolute effect size correctly when abs = TRUE", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(cohens_d(x1, x2, abs = F), -3.1623, tolerance = 1e-3)
expect_equal(cohens_d(x2, x1, abs = T), 3.1623, tolerance = 1e-3)
})
test_that("Cohen's d returns warning for empty vectors", {
x1 <- numeric(0)
x2 <- c(1, 2, 3)
expect_warning(cohens_d(x1, x2), "Input lengths of x and y must be greater than 0")
})
devtools::test()
devtools::build()
devtools::load_all()
test_that("Cohen's d returns warning for empty vectors", {
x1 <- numeric(0)
x2 <- c(1, 2, 3)
expect_error(cohens_d(x1, x2), "Input lengths of x and y must be greater than 0")
})
test_that("Cohen's d returns NaN if standard deviation is zero", {
# Case with no variability in x1
x1 <- c(5, 5, 5, 5, 5)
x2 <- c(1, 2, 3, 4, 5)
expect_true(is.nan(cohens_d(x1, x2)))
})
# Case with no variability in x1
x1 <- c(5, 5, 5, 5, 5)
x2 <- c(1, 2, 3, 4, 5)
cohens_d(x1, x2)
lsr::cohensD(x1, x2)
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(1, 2, 3, 4, 5)
lsr::cohensD(x1, x2)
expect_equal(cohens_d(x1, x2), 0)
test_that("Cohen's d returns zero when both vectors have the same mean", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(1, 2, 3, 4, 5)
expect_equal(cohens_d(x1, x2), 0)
})
test_that("Cohen's d works with single element difference", {
x1 <- c(1)
x2 <- c(2)
expect_true(is.nan(cohens_d(x1, x2)))
})
devtools::check()
devtools::test()
test_that("cohens_d calculates correctly for non-empty vectors", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(cohens_d(x1, x2, F), -3.162, tolerance = 1e-3)
expect_equal(cohens_d(x1, x2, T), 3.162, tolerance = 1e-3)
})
test_that("cohens_d calculates absolute effect size correctly when abs = TRUE", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(6, 7, 8, 9, 10)
expect_equal(cohens_d(x2, x1, abs = T), 3.1623, tolerance = 1e-3)
})
test_that("cohens_d returns warning for empty vectors", {
x1 <- numeric(0)
x2 <- c(1, 2, 3)
expect_error(cohens_d(x1, x2), "Input lengths of x and y must be greater than 0")
})
test_that("cohens_d returns zero when both vectors have the same mean", {
x1 <- c(1, 2, 3, 4, 5)
x2 <- c(1, 2, 3, 4, 5)
expect_equal(cohens_d(x1, x2), 0)
})
test_that("cohens_d works with single element difference", {
x1 <- c(1)
x2 <- c(2)
expect_true(is.nan(cohens_d(x1, x2)))
})
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, byrow = TRUE)
expect_equal(round(odds_ratio(data), 3), 1.5, tolerance = 1e-3)
})
test_that("odds_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)  # 3x2 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)  # 1x4 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("odds_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, byrow = TRUE)
expect_equal(odds_ratio(data), 0)  # Odds ratio should be zero if a=0
data <- matrix(c(10, 0, 5, 15), nrow = 2, byrow = TRUE)
expect_equal(odds_ratio(data), Inf)  # Odds ratio should be Inf if b=0
})
test_that("odds_ratio returns NaN for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, byrow = TRUE)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when c=0
data <- matrix(c(10, 20, 5, 0), nrow = 2, byrow = TRUE)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when d=0
})
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(round(odds_ratio(data), 3), 1.5, tolerance = 1e-3)
})
test_that("odds_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)  # 3x2 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)  # 1x4 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("odds_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 0)  # Odds ratio should be zero if a=0
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), Inf)  # Odds ratio should be Inf if b=0
})
test_that("odds_ratio returns NaN for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when c=0
data <- matrix(c(10, 20, 5, 0), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when d=0
})
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(round(odds_ratio(data), 3), 1.5, tolerance = 1e-3)
})
expect_equal(odds_ratio(data), 1.5, tolerance = 1e-3)
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1.5, tolerance = 1e-3)
})
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1.5, tolerance = 1e-3)
test_that("odds_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)  # 3x2 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)  # 1x4 matrix
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("odds_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 0)  # Odds ratio should be zero if a=0
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), Inf)  # Odds ratio should be Inf if b=0
})
test_that("odds_ratio returns NaN for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when c=0
data <- matrix(c(10, 20, 5, 0), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when d=0
})
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
odds_ratio(data)
devtools::build()
devtools::load_all()
test_that("odds_ratio returns NaN for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when c=0
data <- matrix(c(10, 20, 5, 0), nrow = 2, ncol = 2)
expect_true(is.nan(odds_ratio(data)))  # Division by zero when d=0
})
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
is.nan(odds_ratio(data)
)
odds_ratio(data)
expect_true(is.na(odds_ratio(data)))
test_that("odds_ratio returns NA for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.na(odds_ratio(data)))
})
expect_equal(odds_ratio(data), 1)
test_that("odds_ratio returns 1 for a balanced 2x2 matrix", {
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1)
})
odds_ratio(data)
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
a = data[1,1]
b = data[1,2]
c = data[2,1]
d = data[2,2]
odds = (a / b) / (c / d)
odds
devtools::build()
devtools::load_all()
test_that("odds_ratio returns NA for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.na(odds_ratio(data)))
})
test_that("odds_ratio returns 1 for a balanced 2x2 matrix", {
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1)
})
test_that("odds_ratio returns NA for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.na(odds_ratio(data)))
})
odds_ratio(data)
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
a = data[1,1]
b = data[1,2]
c = data[2,1]
d = data[2,2]
odds = (a / b) / (c / d)
odds
is.numeric(odds)
devtools::build()
devtools::load_all()
risk = (a / (a + b)) / (c / (c + d))
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1.5, tolerance = 1e-3)
})
test_that("odds_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("odds_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 0)
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), Inf)
})
test_that("odds_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1.5, tolerance = 1e-3)
})
test_that("odds_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)
expect_error(odds_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("odds_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 0)
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), NA)
})
test_that("odds_ratio returns NA for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.na(odds_ratio(data)))
})
test_that("odds_ratio returns 1 for a balanced 2x2 matrix", {
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
expect_equal(odds_ratio(data), 1)
})
test_that("risk_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1.5, tolerance = 1e-3)
})
test_that("risk_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1.5, tolerance = 1e-3)
})
risk_ratio(data)
test_that("risk_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1.75, tolerance = 1e-3)
})
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
risk_ratio(data)
test_that("risk_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1.16667, tolerance = 1e-3)
})
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)
test_that("risk_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)
expect_error(risk_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)
expect_error(risk_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("risk_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 0)
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), NA)
})
test_that("risk_ratio returns NA for division by zero cases", {
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
expect_true(is.na(risk_ratio(data)))
})
data <- matrix(c(10, 20, 0, 15), nrow = 2, ncol = 2)
risk_ratio(data)
test_that("risk_ratio returns 1 for a balanced 2x2 matrix", {
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1)
})
test_that("risk_ratio calculates correctly for a 2x2 matrix", {
data <- matrix(c(10, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1.16667, tolerance = 1e-3)
})
test_that("risk_ratio returns error for non-2x2 input", {
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3)
expect_error(risk_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
data <- matrix(c(1, 2, 3, 4), nrow = 1)
expect_error(risk_ratio(data), "Input dimension must be a matrix of 2x2 dimension.")
})
test_that("risk_ratio handles cases where one cell is zero", {
data <- matrix(c(0, 20, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 0)
data <- matrix(c(10, 0, 5, 15), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), NA)
})
test_that("risk_ratio returns 1 for a balanced 2x2 matrix", {
data <- matrix(c(10, 10, 10, 10), nrow = 2, ncol = 2)
expect_equal(risk_ratio(data), 1)
})
devtools::check()
devtools::test()
test_that("coef_determination calculates correctly for non-empty vectors", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 4, 3, 2, 1)
expect_equal(round(coef_determination(x, y), 3), 1)  # Perfect negative correlation (r = -1, r^2 = 1)
y <- c(1, 2, 3, 4, 5)
expect_equal(round(coef_determination(x, y), 3), 1)  # Perfect positive correlation (r = 1, r^2 = 1)
})
test_that("coef_determination works with non-perfect correlation", {
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
expect_equal(round(coef_determination(x, y), 3), 0.96, tolerance = 1e-2)  # r^2 close to 1 but not perfect
})
test_that("coef_determination calculates correctly for non-empty vectors", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 4, 3, 2, 1)
expect_equal(round(coef_determination(x, y), 3), 1)  # Perfect negative correlation (r = -1, r^2 = 1)
y <- c(1, 2, 3, 4, 5)
expect_equal(round(coef_determination(x, y), 3), 1)  # Perfect positive correlation (r = 1, r^2 = 1)
})
test_that("coef_determination calculates correctly for non-empty vectors", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 4, 3, 2, 1)
expect_equal(round(coef_determination(x, y), 3), 1)
y <- c(1, 2, 3, 4, 5)
expect_equal(round(coef_determination(x, y), 3), 1)
})
test_that("coef_determination works with non-perfect correlation", {
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
expect_equal(round(coef_determination(x, y), 3), 0.96, tolerance = 1e-2)
})
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
test_that("coef_determination calculates correctly for non-empty vectors", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 4, 3, 2, 1)
expect_equal(coef_determination(x, y), 1)
y <- c(1, 2, 3, 4, 5)
expect_equal(coef_determination(x, y), 1)
})
test_that("coef_determination works with non-perfect correlation", {
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
expect_equal(coef_determination(x, y), 0.96, tolerance = 1e-2)
})
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
expect_equal(coef_determination(x, y), 0.96, tolerance = 1e-2)
coef_determination(x, y)
coef(x,y)^2
cor(x,y)^2
test_that("coef_determination works with non-perfect correlation", {
x <- c(1, 2, 3, 4, 5)
y <- c(1, 3, 2, 4, 5)
expect_equal(coef_determination(x, y), 0.81, tolerance = 1e-2)
})
test_that("coef_determination returns error for empty or unequal vectors", {
x <- numeric(0)
y <- c(1, 2, 3)
expect_error(coef_determination(x, y), "Input lengths of x and y must be equal and greater than 0.")
x <- c(1, 2, 3)
y <- c(1, 2)
expect_error(coef_determination(x, y), "Input lengths of x and y must be equal and greater than 0.")
})
test_that("coef_determination works for a constant vector", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)  # No variability in y
expect_equal(coef_determination(x, y), 0)  # r = 0, r^2 = 0
})
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)
coef_determination(x, y)
cor(x,y)
test_that("coef_determination returns NA for a constant vector", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)
expect_true(is.na(coef_determination(x, y)))
})
is.na(coef_determination(x, y)
)
test_that("coef_determination returns error for a constant vector", {
x <- c(1, 2, 3, 4, 5)
y <- c(5, 5, 5, 5, 5)
expect_error(coef_determination(x, y), "Std is 0")
})
test_that("coef_determination works for perfectly correlated variables", {
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, 5)  # Perfect positive correlation (r = 1)
expect_equal(coef_determination(x, y), 1)  # r^2 = 1
y <- c(5, 4, 3, 2, 1)  # Perfect negative correlation (r = -1)
expect_equal(coef_determination(x, y), 1)  # r^2 = 1
})
devtools::test()
devtools::check()
